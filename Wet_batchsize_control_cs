using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Configuration;

namespace YourNamespace
{
public partial class WetBatchSizeControl : System.Web.UI.Page
{
// 資料庫連線字串 - 請在 web.config 中設定
private string ConnectionString => ConfigurationManager.ConnectionStrings[“DefaultConnection”].ConnectionString;

```
    // 篩選條件集合
    private List<FilterCondition> FilterConditions
    {
        get
        {
            if (Session["FilterConditions"] == null)
                Session["FilterConditions"] = new List<FilterCondition>();
            return (List<FilterCondition>)Session["FilterConditions"];
        }
        set
        {
            Session["FilterConditions"] = value;
        }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            InitializePage();
            LoadData();
            LoadUserCredentials(); // 從 Session 載入使用者資訊
        }
        
        // 更新篩選條件顯示
        UpdateFilterDisplay();
        
        // 註冊客戶端腳本 (IE 兼容)
        RegisterClientScript();
    }

    private void InitializePage()
    {
        // 設定初始時間 (IE 兼容寫法)
        string timeScript = @"
            if (document.getElementById('lastUpdateTime')) {
                document.getElementById('lastUpdateTime').innerHTML = '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + @"';
            }";
        ClientScript.RegisterStartupScript(this.GetType(), "updateTime", timeScript, true);
    }

    private void LoadUserCredentials()
    {
        // 從 Session 載入記住的使用者資訊
        if (Session["RememberUser"] != null && (bool)Session["RememberUser"])
        {
            if (Session["UserID"] != null)
                userID.Value = Session["UserID"].ToString();
            if (Session["Password"] != null)
                passward.Value = Session["Password"].ToString();
            rememberMe.Checked = true;
        }
    }

    private void RegisterClientScript()
    {
        // 註冊 jQuery 相關腳本 (IE8+ 兼容)
        string script = @"
            <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js'></script>
            <script type='text/javascript'>
            $(document).ready(function() {
                // 數字輸入驗證 (IE 兼容)
                $('#tbx_min_wafer_cnt').on('keypress', function(e) {
                    var charCode = (e.which) ? e.which : e.keyCode;
                    if (charCode > 31 && (charCode < 48 || charCode > 57)) {
                        return false;
                    }
                    return true;
                });
                
                // IE 兼容的輸入驗證
                $('#tbx_min_wafer_cnt').on('input propertychange', function() {
                    var value = this.value;
                    this.value = value.replace(/[^0-9]/g, '');
                });
                
                // 表格行 hover 效果 (IE 兼容)
                $('.table-custom tbody tr').hover(
                    function() { 
                        $(this).addClass('table-hover'); 
                    },
                    function() { 
                        $(this).removeClass('table-hover'); 
                    }
                );
            });
            
            // 表單驗證 (IE 兼容)
            function validateForm() {
                var required = ['txb_eqpid', 'txb_prodgid', 'tbx_prodgrp', 'tbx_prodspecid', 'tbx_openo'];
                for (var i = 0; i < required.length; i++) {
                    var field = document.getElementById(required[i]);
                    if (!field || field.value == '') {
                        alert('請填寫所有必填欄位！');
                        if (field) field.focus();
                        return false;
                    }
                }
                
                var batchSize = document.getElementById('batch_size');
                if (!batchSize || batchSize.value == '') {
                    alert('請選擇 Batch Size！');
                    if (batchSize) batchSize.focus();
                    return false;
                }
                
                return true;
            }
            
            // 新增篩選條件 (IE 兼容)
            function addFilterCondition() {
                var field = document.getElementById('filterField').value;
                var operator = document.getElementById('filterOperator').value;
                var value = document.getElementById('filterValue').value;
                var logic = document.getElementById('filterLogic').value;
                
                if (value == '') {
                    alert('請輸入篩選條件值！');
                    document.getElementById('filterValue').focus();
                    return;
                }
                
                // IE 兼容的 PostBack
                __doPostBack('AddFilter', field + '|' + operator + '|' + value + '|' + logic);
            }
            
            // 更新時間戳 (IE 兼容)
            function updateLastUpdateTime() {
                var now = new Date();
                var timeStr = now.getFullYear() + '-' + 
                             padZero(now.getMonth() + 1) + '-' + 
                             padZero(now.getDate()) + ' ' + 
                             padZero(now.getHours()) + ':' + 
                             padZero(now.getMinutes()) + ':' + 
                             padZero(now.getSeconds());
                
                var element = document.getElementById('lastUpdateTime');
                if (element) {
                    element.innerHTML = timeStr;
                }
            }
            
            function padZero(num) {
                return num < 10 ? '0' + num : num;
            }
            
            // 表格操作函數 (IE 兼容)
            function updateActive(id, isActive) {
                if (confirm('確定要變更此設定的啟用狀態嗎？')) {
                    __doPostBack('UpdateActive', id + '|' + isActive);
                }
            }
            
            function deleteRecord(id) {
                if (confirm('確定要刪除此筆資料嗎？此操作無法復原！')) {
                    __doPostBack('DeleteRecord', id);
                }
            }
            </script>";
            
        ClientScript.RegisterStartupScript(this.GetType(), "InitScript", script);
    }

    protected void btnAdd_SeverClick(object sender, EventArgs e)
    {
        try
        {
            // 表單驗證
            if (!ValidateForm())
                return;

            // 驗證使用者權限
            if (!ValidateUser())
            {
                ShowMessage("使用者驗證失敗，請檢查 ID 和密碼！", "alert-danger");
                return;
            }

            // 儲存記住密碼設定到 Session
            SaveUserCredentials();

            // 新增資料到資料庫
            if (InsertBatchSizeSetting())
            {
                ShowMessage("新增設定成功！", "alert-success");
                ClearForm();
                LoadData(); // 重新載入資料
                
                // 更新時間戳
                ClientScript.RegisterStartupScript(this.GetType(), "updateTimeAfterAdd", 
                    "updateLastUpdateTime();", true);
            }
            else
            {
                ShowMessage("新增設定失敗，請檢查資料是否重複！", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowMessage("系統錯誤：" + ex.Message, "alert-danger");
            LogError(ex);
        }
    }

    protected void btnExecuteFilter_ServerClick(object sender, EventArgs e)
    {
        try
        {
            LoadData(); // 重新載入資料（會應用目前的篩選條件）
            ShowMessage("篩選執行完成，共 " + FilterConditions.Count + " 個條件", "alert-info");
        }
        catch (Exception ex)
        {
            ShowMessage("篩選執行失敗：" + ex.Message, "alert-danger");
            LogError(ex);
        }
    }

    protected void btnClearFilter_ServerClick(object sender, EventArgs e)
    {
        try
        {
            FilterConditions.Clear();
            filterConditions.Value = "";
            LoadData(); // 重新載入所有資料
            ShowMessage("篩選條件已清除", "alert-info");
        }
        catch (Exception ex)
        {
            ShowMessage("清除篩選條件失敗：" + ex.Message, "alert-danger");
            LogError(ex);
        }
    }

    protected override void RaisePostBackEvent(IPostBackEventHandler sourceControl, string eventArgument)
    {
        string eventTarget = Request.Form["__EVENTTARGET"];
        
        if (eventTarget == "AddFilter")
        {
            AddFilterCondition(eventArgument);
        }
        else if (eventTarget == "UpdateActive")
        {
            UpdateActiveStatus(eventArgument);
        }
        else if (eventTarget == "DeleteRecord")
        {
            DeleteRecord(eventArgument);
        }
        else
        {
            base.RaisePostBackEvent(sourceControl, eventArgument);
        }
    }

    private void AddFilterCondition(string conditionData)
    {
        try
        {
            string[] parts = conditionData.Split('|');
            if (parts.Length >= 4)
            {
                var condition = new FilterCondition
                {
                    Field = parts[0],
                    Operator = parts[1],
                    Value = parts[2],
                    Logic = parts[3]
                };

                FilterConditions.Add(condition);
                UpdateFilterDisplay();
                
                // 清空輸入框 (IE 兼容)
                ClientScript.RegisterStartupScript(this.GetType(), "clearFilter", 
                    "if (document.getElementById('filterValue')) { document.getElementById('filterValue').value = ''; }", true);
            }
        }
        catch (Exception ex)
        {
            ShowMessage("新增篩選條件失敗：" + ex.Message, "alert-danger");
            LogError(ex);
        }
    }

    private void UpdateActiveStatus(string data)
    {
        try
        {
            string[] parts = data.Split('|');
            int id;
            bool isActive;
            
            if (parts.Length >= 2 && int.TryParse(parts[0], out id) && bool.TryParse(parts[1], out isActive))
            {
                using (SqlConnection conn = new SqlConnection(ConnectionString))
                {
                    string query = "UPDATE WET_BATCH_SIZE_CONTROL SET ACTIVE = @Active, UPDATE_USER = @UpdateUser, UPDATE_TIME = @UpdateTime WHERE ID = @Id";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.AddWithValue("@Active", isActive);
                        cmd.Parameters.AddWithValue("@UpdateUser", !string.IsNullOrEmpty(userID.Value) ? userID.Value.Trim() : "System");
                        cmd.Parameters.AddWithValue("@UpdateTime", DateTime.Now);
                        cmd.Parameters.AddWithValue("@Id", id);
                        
                        conn.Open();
                        int result = cmd.ExecuteNonQuery();
                        
                        if (result > 0)
                        {
                            ShowMessage("設定狀態已更新為：" + (isActive ? "啟用" : "停用"), "alert-success");
                            LoadData();
                        }
                        else
                        {
                            ShowMessage("更新失敗，找不到指定的記錄", "alert-warning");
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ShowMessage("更新狀態失敗：" + ex.Message, "alert-danger");
            LogError(ex);
        }
    }

    private void DeleteRecord(string idString)
    {
        try
        {
            int id;
            if (int.TryParse(idString, out id))
            {
                using (SqlConnection conn = new SqlConnection(ConnectionString))
                {
                    // 軟刪除：將 ACTIVE 設為 false
                    string query = "UPDATE WET_BATCH_SIZE_CONTROL SET ACTIVE = 0, UPDATE_USER = @UpdateUser, UPDATE_TIME = @UpdateTime WHERE ID = @Id";
                    
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.AddWithValue("@UpdateUser", !string.IsNullOrEmpty(userID.Value) ? userID.Value.Trim() : "System");
                        cmd.Parameters.AddWithValue("@UpdateTime", DateTime.Now);
                        cmd.Parameters.AddWithValue("@Id", id);
                        
                        conn.Open();
                        int result = cmd.ExecuteNonQuery();
                        
                        if (result > 0)
                        {
                            ShowMessage("記錄已成功刪除", "alert-success");
                            LoadData();
                        }
                        else
                        {
                            ShowMessage("刪除失敗，找不到指定的記錄", "alert-warning");
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ShowMessage("刪除記錄失敗：" + ex.Message, "alert-danger");
            LogError(ex);
        }
    }

    private void UpdateFilterDisplay()
    {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < FilterConditions.Count; i++)
        {
            var condition = FilterConditions[i];
            if (i > 0)
                sb.Append(" " + condition.Logic + " ");
            
            string operatorText = GetOperatorText(condition.Operator);
            sb.Append(condition.Field + " " + operatorText + " '" + condition.Value + "'");
        }
        filterConditions.Value = sb.ToString();
    }

    private string GetOperatorText(string op)
    {
        switch (op)
        {
            case "=": return "等於";
            case "!=": return "不等於";
            case ">": return "大於";
            case ">=": return "大於等於";
            case "<": return "小於";
            case "<=": return "小於等於";
            case "like_start": return "開頭以";
            case "like_end": return "結尾以";
            case "not_like_start": return "不開頭以";
            case "not_like_end": return "不結尾以";
            case "like": return "包含";
            case "not_like": return "不包含";
            default: return op;
        }
    }

    private bool ValidateUser()
    {
        string userId = userID.Value != null ? userID.Value.Trim() : "";
        string password = passward.Value != null ? passward.Value.Trim() : "";

        if (string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(password))
            return false;

        // 簡單的驗證 - 實際專案中請使用適當的驗證機制
        try
        {
            using (SqlConnection conn = new SqlConnection(ConnectionString))
            {
                string query = "SELECT COUNT(*) FROM USERS WHERE USER_ID = @UserId AND PASSWORD = @Password AND ACTIVE = 1";
                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@UserId", userId);
                    cmd.Parameters.AddWithValue("@Password", password);
                    
                    conn.Open();
                    object result = cmd.ExecuteScalar();
                    int count = result != null ? Convert.ToInt32(result) : 0;
                    return count > 0;
                }
            }
        }
        catch
        {
            // 如果資料庫驗證失敗，使用預設帳號
            return (userId == "admin" && password == "admin123");
        }
    }

    private bool ValidateForm()
    {
        List<string> errors = new List<string>();

        if (string.IsNullOrEmpty(txb_eqpid.Value))
            errors.Add("EQP_ID 不能為空");

        if (string.IsNullOrEmpty(txb_prodgid.Value))
            errors.Add("PRODG_ID 不能為空");

        if (string.IsNullOrEmpty(tbx_prodgrp.Value))
            errors.Add("PRODUCT_GROUP 不能為空");

        if (string.IsNullOrEmpty(tbx_prodspecid.Value))
            errors.Add("PRODSPEC_ID 不能為空");

        if (string.IsNullOrEmpty(tbx_openo.Value))
            errors.Add("OPE_NO 不能為空");

        if (string.IsNullOrEmpty(batch_size.Value))
            errors.Add("BATCH_SIZE 必須選擇");

        // 驗證數字欄位
        if (!string.IsNullOrEmpty(tbx_min_wafer_cnt.Value))
        {
            int waferCount;
            if (!int.TryParse(tbx_min_wafer_cnt.Value, out waferCount) || waferCount < 0)
                errors.Add("MIN_WAFER_COUNT 必須是非負整數");
        }

        if (errors.Count > 0)
        {
            ShowMessage("表單驗證錯誤：<br>" + string.Join("<br>", errors.ToArray()), "alert-danger");
            return false;
        }

        return true;
    }

    private void SaveUserCredentials()
    {
        if (rememberMe.Checked)
        {
            Session["RememberUser"] = true;
            Session["UserID"] = userID.Value;
            Session["Password"] = passward.Value;
            Session.Timeout = 480; // 8小時
        }
        else
        {
            // 清除 Session
            Session.Remove("RememberUser");
            Session.Remove("UserID");
            Session.Remove("Password");
        }
    }

    private bool InsertBatchSizeSetting()
    {
        try
        {
            using (SqlConnection conn = new SqlConnection(ConnectionString))
            {
                string query = @"
                    INSERT INTO WET_BATCH_SIZE_CONTROL 
                    (EQP_ID, PRODG_ID, PRODUCT_GROUP, PRODSPEC_ID, OPE_NO, BATCH_SIZE, MIN_WAFER_COUNT, MEMO, CREATE_USER, CREATE_TIME, UPDATE_USER, UPDATE_TIME, ACTIVE)
                    VALUES 
                    (@EqpId, @ProdgId, @ProductGroup, @ProdspecId, @OpeNo, @BatchSize, @MinWaferCount, @Memo, @CreateUser, @CreateTime, @UpdateUser, @UpdateTime, 1)";

                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@EqpId", txb_eqpid.Value.Trim());
                    cmd.Parameters.AddWithValue("@ProdgId", txb_prodgid.Value.Trim());
                    cmd.Parameters.AddWithValue("@ProductGroup", tbx_prodgrp.Value.Trim());
                    cmd.Parameters.AddWithValue("@ProdspecId", tbx_prodspecid.Value.Trim());
                    cmd.Parameters.AddWithValue("@OpeNo", tbx_openo.Value.Trim());
                    
                    int batchSizeValue;
                    int.TryParse(batch_size.Value, out batchSizeValue);
                    cmd.Parameters.AddWithValue("@BatchSize", batchSizeValue);
                    
                    if (string.IsNullOrEmpty(tbx_min_wafer_cnt.Value))
                    {
                        cmd.Parameters.AddWithValue("@MinWaferCount", DBNull.Value);
                    }
                    else
                    {
                        int waferCount;
                        int.TryParse(tbx_min_wafer_cnt.Value, out waferCount);
                        cmd.Parameters.AddWithValue("@MinWaferCount", waferCount);
                    }
                    
                    cmd.Parameters.AddWithValue("@Memo", tbx_memo.Value != null ? tbx_memo.Value.Trim() : "");
                    cmd.Parameters.AddWithValue("@CreateUser", userID.Value.Trim());
                    cmd.Parameters.AddWithValue("@CreateTime", DateTime.Now);
                    cmd.Parameters.AddWithValue("@UpdateUser", userID.Value.Trim());
                    cmd.Parameters.AddWithValue("@UpdateTime", DateTime.Now);

                    conn.Open();
                    int result = cmd.ExecuteNonQuery();
                    return result > 0;
                }
            }
        }
        catch (SqlException ex)
        {
            if (ex.Number == 2627 || ex.Number == 2601) // 主鍵或唯一約束違反
            {
                ShowMessage("資料已存在，請檢查是否重複新增！", "alert-warning");
                return false;
            }
            throw;
        }
    }

    private void LoadData()
    {
        try
        {
            DataTable dt = GetBatchSizeData();
            GenerateDataTable(dt);
            
            // 更新上傳時間 (IE 兼容)
            string timeScript = @"
                if (document.getElementById('lastUploadTime')) {
                    document.getElementById('lastUploadTime').innerHTML = '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + @"';
                }";
            ClientScript.RegisterStartupScript(this.GetType(), "updateUploadTime", timeScript, true);
        }
        catch (Exception ex)
        {
            ShowMessage("載入資料失敗：" + ex.Message, "alert-danger");
            LogError(ex);
        }
    }

    private DataTable GetBatchSizeData()
    {
        using (SqlConnection conn = new SqlConnection(ConnectionString))
        {
            StringBuilder query = new StringBuilder(@"
                SELECT 
                    ID,
                    EQP_ID,
                    PRODG_ID,
                    PRODUCT_GROUP,
                    PRODSPEC_ID,
                    OPE_NO,
                    BATCH_SIZE,
                    MIN_WAFER_COUNT,
                    MEMO,
                    CREATE_USER,
                    CREATE_TIME,
                    UPDATE_USER,
                    UPDATE_TIME,
                    ACTIVE
                FROM WET_BATCH_SIZE_CONTROL");

            // 加入篩選條件
            if (FilterConditions.Count > 0)
            {
                query.Append(" WHERE ");
                for (int i = 0; i < FilterConditions.Count; i++)
                {
                    var condition = FilterConditions[i];
                    if (i > 0)
                        query.Append(" " + condition.Logic + " ");
                    
                    query.Append(BuildWhereClause(condition, i));
                }
            }

            query.Append(" ORDER BY UPDATE_TIME DESC, CREATE_TIME DESC");

            using (SqlCommand cmd = new SqlCommand(query.ToString(), conn))
            {
                // 加入參數
                for (int i = 0; i < FilterConditions.Count; i++)
                {
                    var condition = FilterConditions[i];
                    string paramName = "@FilterValue" + i;
                    
                    switch (condition.Operator)
                    {
                        case "like_start":
                            cmd.Parameters.AddWithValue(paramName, condition.Value + "%");
                            break;
                        case "like_end":
                            cmd.Parameters.AddWithValue(paramName, "%" + condition.Value);
                            break;
                        case "not_like_start":
                            cmd.Parameters.AddWithValue(paramName, condition.Value + "%");
                            break;
                        case "not_like_end":
                            cmd.Parameters.AddWithValue(paramName, "%" + condition.Value);
                            break;
                        case "like":
                        case "not_like":
                            cmd.Parameters.AddWithValue(paramName, "%" + condition.Value + "%");
                            break;
                        default:
                            cmd.Parameters.AddWithValue(paramName, condition.Value);
                            break;
                    }
                }

                using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                {
                    DataTable dt = new DataTable();
                    conn.Open();
                    adapter.Fill(dt);
                    return dt;
                }
            }
        }
    }

    private string BuildWhereClause(FilterCondition condition, int index)
    {
        string paramName = "@FilterValue" + index;
        string field = condition.Field;
        
        switch (condition.Operator)
        {
            case "=":
            case "!=":
            case ">":
            case ">=":
            case "<":
            case "<=":
                return field + " " + condition.Operator + " " + paramName;
            case "like_start":
                return field + " LIKE " + paramName;
            case "like_end":
                return field + " LIKE " + paramName;
            case "not_like_start":
                return field + " NOT LIKE " + paramName;
            case "not_like_end":
                return field + " NOT LIKE " + paramName;
            case "like":
                return field + " LIKE " + paramName;
            case "not_like":
                return field + " NOT LIKE " + paramName;
            default:
                return field + " = " + paramName;
        }
    }

    private void GenerateDataTable(DataTable dt)
    {
        StringBuilder html = new StringBuilder();
        
        html.Append("<table class='table-custom'>");
        html.Append("<thead><tr>");
        html.Append("<th style='width: 60px;'>序號</th>");
        html.Append("<th style='width: 80px;'>EQP_ID</th>");
        html.Append("<th style='width: 100px;'>PRODG_ID</th>");
        html.Append("<th style='width: 120px;'>PRODUCT_GROUP</th>");
        html.Append("<th style='width: 120px;'>PRODSPEC_ID</th>");
        html.Append("<th style='width: 80px;'>OPE_NO</th>");
        html.Append("<th style='width: 80px;'>BATCH_SIZE</th>");
        html.Append("<th style='width: 100px;'>MIN_WAFER_COUNT</th>");
        html.Append("<th style='width: 150px;'>MEMO</th>");
        html.Append("<th style='width: 80px;'>CREATE_USER</th>");
        html.Append("<th style='width: 140px;'>CREATE_TIME</th>");
        html.Append("<th style='width: 80px;'>UPDATE_USER</th>");
        html.Append("<th style='width: 140px;'>UPDATE_TIME</th>");
        html.Append("<th style='width: 60px;'>啟用</th>");
        html.Append("<th style='width: 80px;'>操作</th>");
        html.Append("</tr></thead>");
        
        html.Append("<tbody>");
        
        for (int i = 0; i < dt.Rows.Count; i++)
        {
            DataRow row = dt.Rows[i];
            html.Append("<tr>");
            html.Append("<td>" + (i + 1) + "</td>");
            html.Append("<td>" + row["EQP_ID"] + "</td>");
            html.Append("<td>" + row["PRODG_ID"] + "</td>");
            html.Append("<td>" + row["PRODUCT_GROUP"] + "</td>");
            html.Append("<td>" + row["PRODSPEC_ID"] + "</td>");
            html.Append("<td>" + row["OPE_NO"] + "</td>");
            html.Append("<td>" + GetBatchSizeText(row["BATCH_SIZE"]) + "</td>");
            html.Append("<td>" + row["MIN_WAFER_COUNT"] + "</td>");
            html.Append("<td>" + row["MEMO"] + "</td>");
            html.Append("<td>" + row["CREATE_USER"] + "</td>");
            html.Append("<td>" + Convert.ToDateTime(row["CREATE_TIME"]).ToString("yyyy-MM-dd HH:mm:ss") + "</td>");
            html.Append("<td>" + row["UPDATE_USER"] + "</td>");
            html.Append("<td>" + Convert.ToDateTime(row["UPDATE_TIME"]).ToString("yyyy-MM-dd HH:mm:ss") + "</td>");
            
            // 啟用狀態
            bool isActive = Convert.ToBoolean(row["ACTIVE"]);
            html.Append("<td class='modify-cell'>");
            html.Append("<input type='checkbox' " + (isActive ? "checked='checked'" : "") + " onclick='updateActive(" + row["ID"] + ", this.checked)' />");
            html.Append("</td>");
            
            // 操作按鈕
            html.Append("<td class='modify-cell'>");
            html.Append("<button type='button' class='btn btn-custom btn-sm' onclick='deleteRecord(" + row["ID"] + ")'>刪除</button>");
            html.Append("</td>");
            
            html.Append("</tr>");
        }
        
        html.Append("</tbody>");
        html.Append("</table>");
        
        if (dt.Rows.Count == 0)
        {
            html.Clear();
            html.Append("<div class='alert alert-info' style='text-align: center;'>目前沒有符合條件的資料</div>");
        }
        
        tableContainer.InnerHtml = html.ToString();
    }

    private string GetBatchSizeText(object batchSize)
    {
        if (batchSize == null || batchSize == DBNull.Value)
            return "";
            
        switch (batchSize.ToString())
        {
            case "1": return "單批";
            case "2": return "雙批";
            default: return batchSize.ToString();
        }
    }

    private void ClearForm()
    {
        txb_eqpid.Value = "";
        txb_prodgid.Value = "";
        tbx_prodgrp.Value = "";
        tbx_prodspecid.Value = "";
        tbx_openo.Value = "";
        batch_size.Value = "";
        tbx_min_wafer_cnt.Value = "";
        tbx_memo.Value = "";
    }

    private void ShowMessage(string message, string cssClass)
    {
        pnlMessage.Visible = true;
        pnlMessage.CssClass = "alert " + cssClass;
        lblMessage.Text = message;
        
        // IE 兼容的自動隱藏訊息
        string script = @"
            setTimeout(function() {
                var panel = document.getElementById('" + pnlMessage.ClientID + @"');
                if (panel) {
                    panel.style.display = 'none';
                }
            }, 3000);";
        ClientScript.RegisterStartupScript(this.GetType(), "hideMessage", script, true);
    }

    private void LogError(Exception ex)
    {
        // 簡單的錯誤記錄 - 可根據需要擴展
        System.Diagnostics.Debug.WriteLine("Error: " + ex.Message);
        System.Diagnostics.Debug.WriteLine("Stack Trace: " + ex.StackTrace);
        
        // 可以寫入事件記錄或檔案
        try
        {
            System.Diagnostics.EventLog.WriteEntry("WetBatchSizeControl", 
                "Error: " + ex.Message + "\r\nStack Trace: " + ex.StackTrace, 
                System.Diagnostics.EventLogEntryType.Error);
        }
        catch
        {
            // 如果無法寫入事件記錄，則忽略
        }
    }

    // 篩選條件類別
    public class FilterCondition
    {
        public string Field { get; set; }
        public string Operator { get; set; }
        public string Value { get; set; }
        public string Logic { get; set; }
    }
}
```

}
