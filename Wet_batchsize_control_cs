using System;
using System.Collections;
using System.Data;
using System.Data.OleDb;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Configuration;
using P12RTD_DLL;
using System.Runtime.Remoting.Messaging;
using System.Net.Cache;
using System.Diagnostics.Eventing.Reader;
using System.Runtime.Remoting.Contexts;

public partial class WetBatchSizeControl : System.Web.UI.Page
{
    string vCheckResult;
    string vFunctionName = "WET_BATCH_SIZE_SETTING";
    string ConnectionString = ConfigurationSettings.AppSettings["RTD_P12"];
    Access_control RTD_ACCESS_CONTROL = new Access_control();
    Table_Info_control RTD_TABLE_INFO = new Table_Info_control();

    // 篩選條件集合
    private ArrayList FilterConditions
    {
        get
        {
            if (Session["FilterConditions"] == null)
                Session["FilterConditions"] = new ArrayList();
            return (ArrayList)Session["FilterConditions"];
        }
        set
        {
            Session["FilterConditions"] = value;
        }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        // 每次載入都執行記住密碼功能
        LoadUserCredentials();

        if (!IsPostBack)
        {
            if (Session["Message"] != null)
            {
                ShowMessage(Session["Message"].ToString(), Session["MessageCss"].ToString());
                Session.Remove("Message");
                Session.Remove("MessageCss");
            }

            InitializePage();
            LoadData();
        }

        // 更新篩選條件顯示
        UpdateFilterDisplay();

        // 註冊客戶端腳本
        RegisterClientScript();
    }

    private void InitializePage()
    {
        DataSet ds_temp = new DataSet();
        ds_temp = RTD_TABLE_INFO.Find_Data(vFunctionName);
        string lastUpdateTime = ds_temp.Tables[vFunctionName].Rows[0]["Last_Update_time"].ToString();
        
        string timeScript = @"
            if (document.getElementById('lastUpdateTime')) {
                document.getElementById('lastUpdateTime').innerHTML = '" + lastUpdateTime + @"';
            }";
        ClientScript.RegisterStartupScript(this.GetType(), "updateTime", timeScript, true);
    }

    private void LoadUserCredentials()
    {
        if (Session["RememberUser"] != null && (bool)Session["RememberUser"])
        {
            if (Session["UserID"] != null)
                userID.Value = Session["UserID"].ToString();
            if (Session["Password"] != null)
                passward.Value = Session["Password"].ToString();
            rememberMe.Checked = true;
        }
    }

    private void RegisterClientScript()
    {
        // 只註冊一次 jQuery
        if (!Page.ClientScript.IsClientScriptIncludeRegistered("jquery"))
        {
            Page.ClientScript.RegisterClientScriptInclude(
                "jquery",
                ResolveUrl("~/script/jquery-3.7.0.min.js")
            );
        }

        // 註冊全域函數供 ASP.NET PostBack 使用
        string globalScript = @"
            window.deleteRecord = function(id) {
                if (typeof __doPostBack === 'function') {
                    __doPostBack('DeleteRecord', id);
                } else {
                    console.warn('__doPostBack not available');
                }
            };
            
            window.updateActive = function(id, isChecked) {
                var arg = id + '|' + (isChecked ? 'true' : 'false');
                if (typeof __doPostBack === 'function') {
                    __doPostBack('UpdateActive', arg);
                } else {
                    console.warn('__doPostBack not available');
                }
            };
        ";

        Page.ClientScript.RegisterStartupScript(
            this.GetType(),
            "GlobalFunctions",
            globalScript,
            true
        );
    }

    protected void btnAdd_SeverClick(object sender, EventArgs e)
    {
        try
        {
            if (!ValidateForm())
                return;

            if (!ValidateUser())
            {
                ShowMessage("使用者驗證失敗", "alert-danger");
                return;
            }

            SaveUserCredentials();

            if (InsertBatchSizeSetting())
            {
                Session["Message"] = "新增設定成功";
                Session["MessageCss"] = "alert-success";
                Response.Redirect(Request.RawUrl);
                Context.ApplicationInstance.CompleteRequest();
            }
            else
            {
                ShowMessage("新增設定失敗", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowMessage("系統錯誤: " + ex.Message, "alert-danger");
        }
    }

    protected void btnExecuteFilter_ServerClick(object sender, EventArgs e)
    {
        try
        {
            LoadData();
            ShowMessage("篩選執行完成，共 " + FilterConditions.Count + " 個條件", "alert-info");
        }
        catch (Exception ex)
        {
            ShowMessage("篩選執行失敗: " + ex.Message, "alert-danger");
        }
    }

    protected void btnClearFilter_ServerClick(object sender, EventArgs e)
    {
        try
        {
            FilterConditions.Clear();
            filterConditions.Value = "";
            LoadData();
            ShowMessage("篩選條件已清除", "alert-info");
        }
        catch (Exception ex)
        {
            ShowMessage("清除篩選條件失敗: " + ex.Message, "alert-danger");
        }
    }

    protected override void RaisePostBackEvent(IPostBackEventHandler sourceControl, string eventArgument)
    {
        string eventTarget = Request.Form["__EVENTTARGET"];

        if (eventTarget == "AddFilter")
        {
            AddFilterCondition(eventArgument);
        }
        else if (!string.IsNullOrEmpty(eventTarget) && eventTarget.Contains("UpdateActive"))
        {
            UpdateActiveStatus(eventArgument);
        }
        else if (!string.IsNullOrEmpty(eventTarget) && eventTarget.Contains("DeleteRecord"))
        {
            DeleteRecord(eventArgument);
        }
        else
        {
            base.RaisePostBackEvent(sourceControl, eventArgument);
        }
    }

    private void AddFilterCondition(string conditionData)
    {
        try
        {
            string[] parts = conditionData.Split('|');
            if (parts.Length >= 4)
            {
                FilterCondition condition = new FilterCondition(parts[0], parts[1], parts[2], parts[3]);
                FilterConditions.Add(condition);
                UpdateFilterDisplay();

                ClientScript.RegisterStartupScript(this.GetType(), "clearFilter",
                    "if (document.getElementById('filterValue')) { document.getElementById('filterValue').value = ''; }", true);
            }
        }
        catch (Exception ex)
        {
            ShowMessage("新增篩選條件失敗: " + ex.Message, "alert-danger");
        }
    }

    private void UpdateActiveStatus(string data)
    {
        try
        {
            string[] parts = data.Split('|');
            if (parts.Length < 2)
            {
                ShowMessage("更新狀態失敗：參數不足", "alert-danger");
                return;
            }
            
            string id = parts[0];
            bool isActive = parts[1].Equals("true", System.StringComparison.OrdinalIgnoreCase);

            using (OleDbConnection conn = new OleDbConnection(ConnectionString))
            {
                string query = "UPDATE RTD.WET_BATCH_SIZE_CONTROL SET ACTIVE = ?, UPDATE_USER = ?, UPDATE_TIME = SYSDATE WHERE ID1 = ?";
                using (OleDbCommand cmd = new OleDbCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("ACTIVE", isActive ? 1 : 0);
                    cmd.Parameters.AddWithValue("UPDATE_USER", !string.IsNullOrEmpty(userID.Value) ? userID.Value.Trim() : "System");
                    cmd.Parameters.AddWithValue("ID1", id);

                    conn.Open();
                    int result = cmd.ExecuteNonQuery();
                    if (result > 0)
                    {
                        ShowMessage("設定狀態已更新為: " + (isActive ? "啟用" : "停用"), "alert-success");
                        LoadData();
                    }
                    else
                    {
                        ShowMessage("更新失敗，找不到指定的記錄", "alert-warning");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ShowMessage("更新狀態失敗: " + ex.Message, "alert-danger");
        }
    }

    private void DeleteRecord(string idString)
    {
        try
        {
            using (OleDbConnection conn = new OleDbConnection(ConnectionString))
            {
                string query = "UPDATE RTD.WET_BATCH_SIZE_CONTROL SET ACTIVE = 0, UPDATE_USER = ?, UPDATE_TIME = SYSDATE WHERE ID1 = ?";
                using (OleDbCommand cmd = new OleDbCommand(query, conn))
                {
                    string updUser = !string.IsNullOrEmpty(userID.Value) ? userID.Value.Trim() : "System";
                    cmd.Parameters.AddWithValue("UPDATE_USER", updUser);
                    cmd.Parameters.AddWithValue("ID1", idString);

                    conn.Open();
                    int result = cmd.ExecuteNonQuery();
                    if (result > 0)
                    {
                        ShowMessage("記錄已成功刪除", "alert-success");
                        LoadData();
                    }
                    else
                    {
                        ShowMessage("刪除失敗，找不到指定的記錄", "alert-warning");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ShowMessage("刪除記錄失敗: " + ex.Message, "alert-danger");
        }
    }

    private void UpdateFilterDisplay()
    {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < FilterConditions.Count; i++)
        {
            FilterCondition condition = (FilterCondition)FilterConditions[i];
            if (i > 0)
                sb.Append(" " + condition.Logic + " ");

            string operatorText = GetOperatorText(condition.Operator);
            sb.Append(condition.Field + " " + operatorText + " '" + condition.Value + "'");
        }
        filterConditions.Value = sb.ToString();
    }

    private string GetOperatorText(string op)
    {
        switch (op)
        {
            case "=": return "等於";
            case "!=": return "不等於";
            case ">": return "大於";
            case ">=": return "大於等於";
            case "<": return "小於";
            case "<=": return "小於等於";
            case "like_start": return "開頭以";
            case "like_end": return "結尾以";
            case "not_like_start": return "不開頭以";
            case "not_like_end": return "不結尾以";
            case "like": return "包含";
            case "not_like": return "不包含";
            default: return op;
        }
    }

    private bool ValidateUser()
    {
        string userId = userID.Value != null ? userID.Value.Trim() : "";
        string password = passward.Value != null ? passward.Value.Trim() : "";

        if (string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(password))
            return false;

        try
        {
            vCheckResult = RTD_ACCESS_CONTROL.Check_Authority(vFunctionName, userId, password);
            if (vCheckResult == "Authentication Fail")
            {
                this.Session.Remove("Password");
                return false;
            }
            else
            {
                return true;
            }
        }
        catch (Exception ex)
        {
            ShowMessage("登入失敗: " + ex.Message, "alert-danger");
            return false;
        }
    }

    private bool ValidateForm()
    {
        ArrayList errors = new ArrayList();

        if (string.IsNullOrEmpty(txb_eqpid.Value))
            errors.Add("EQP_ID 不能為空");
        if (string.IsNullOrEmpty(txb_prodgid.Value))
            errors.Add("PRODG_ID 不能為空");
        if (string.IsNullOrEmpty(tbx_prodgrp.Value))
            errors.Add("PRODUCT_GROUP 不能為空");
        if (string.IsNullOrEmpty(tbx_prodspecid.Value))
            errors.Add("PRODSPEC_ID 不能為空");
        if (string.IsNullOrEmpty(tbx_openo.Value))
            errors.Add("OPE_NO 不能為空");
        if (string.IsNullOrEmpty(batch_size.Value))
            errors.Add("BATCH_SIZE 必須選擇");

        if (!string.IsNullOrEmpty(tbx_min_wafer_cnt.Value))
        {
            int waferCount;
            if (!int.TryParse(tbx_min_wafer_cnt.Value, out waferCount) || waferCount < 0)
                errors.Add("MIN_WAFER_COUNT 必須是非負整數");
        }

        if (errors.Count > 0)
        {
            ShowMessage("表單驗證錯誤:<br>" + string.Join("<br>", errors.ToArray()), "alert-danger");
            return false;
        }

        return true;
    }

    private void SaveUserCredentials()
    {
        if (rememberMe.Checked)
        {
            Session["RememberUser"] = true;
            Session["UserID"] = userID.Value;
            Session["Password"] = passward.Value;
            Session.Timeout = 480; // 8小時
        }
        else
        {
            Session.Remove("RememberUser");
            Session.Remove("UserID");
            Session.Remove("Password");
        }
    }

    private bool InsertBatchSizeSetting()
    {
        try
        {
            using (OleDbConnection conn = new OleDbConnection(ConnectionString))
            {
                string query = @"
                    INSERT INTO RTD.WET_BATCH_SIZE_CONTROL 
                    (EQP_ID, PRODG_ID, PRODUCT_GROUP, PRODSPEC_ID, OPE_NO, BATCH_SIZE, MIN_WAFER_COUNT, MEMO, UPDATE_USER, UPDATE_TIME, ACTIVE, ID1)
                    VALUES 
                    (?, ?, ?, ?, ?, ?, ?, ?, ?, SYSDATE, 1, dbms_random.string('A', 16))";

                using (OleDbCommand cmd = new OleDbCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@EqpId", txb_eqpid.Value.Trim());
                    cmd.Parameters.AddWithValue("@ProdgId", txb_prodgid.Value.Trim());
                    cmd.Parameters.AddWithValue("@ProductGroup", tbx_prodgrp.Value.Trim());
                    cmd.Parameters.AddWithValue("@ProdspecId", tbx_prodspecid.Value.Trim());
                    cmd.Parameters.AddWithValue("@OpeNo", tbx_openo.Value.Trim());

                    int batchSizeValue;
                    int.TryParse(batch_size.Value, out batchSizeValue);
                    cmd.Parameters.AddWithValue("@BatchSize", batchSizeValue);

                    if (string.IsNullOrEmpty(tbx_min_wafer_cnt.Value))
                    {
                        cmd.Parameters.AddWithValue("@MinWaferCount", DBNull.Value);
                    }
                    else
                    {
                        int waferCount;
                        int.TryParse(tbx_min_wafer_cnt.Value, out waferCount);
                        cmd.Parameters.AddWithValue("@MinWaferCount", waferCount);
                    }

                    cmd.Parameters.AddWithValue("@Memo", tbx_memo.Value != null ? tbx_memo.Value.Trim() : "");
                    cmd.Parameters.AddWithValue("@UpdateUser", !string.IsNullOrEmpty(userID.Value) ? userID.Value.Trim() : "System");

                    conn.Open();
                    int result = cmd.ExecuteNonQuery();
                    return result > 0;
                }
            }
        }
        catch (OleDbException ex)
        {
            if (ex.ErrorCode == -2147467259) // 主鍵或唯一約束違反
            {
                ShowMessage("資料已存在，請檢查是否重複新增!", "alert-warning");
                return false;
            }
            throw;
        }
    }

    private void LoadData()
    {
        try
        {
            DataTable dt = GetBatchSizeData();
            GenerateDataTable(dt);

            string timeScript = @"
                if (document.getElementById('lastUploadTime')) {
                    document.getElementById('lastUploadTime').innerHTML = '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + @"';
                }";
            ClientScript.RegisterStartupScript(this.GetType(), "updateUploadTime", timeScript, true);
        }
        catch (Exception ex)
        {
            ShowMessage("載入資料失敗: " + ex.Message, "alert-danger");
        }
    }

    private DataTable GetBatchSizeData()
    {
        using (OleDbConnection conn = new OleDbConnection(ConnectionString))
        {
            StringBuilder query = new StringBuilder(@"
                SELECT 
                    EQP_ID, PRODG_ID, PRODUCT_GROUP, PRODSPEC_ID, OPE_NO,
                    BATCH_SIZE, MIN_WAFER_COUNT, MEMO, UPDATE_USER, UPDATE_TIME, ACTIVE, ID1
                FROM RTD.WET_BATCH_SIZE_CONTROL");

            if (FilterConditions.Count > 0)
            {
                query.Append(" WHERE ");
                for (int i = 0; i < FilterConditions.Count; i++)
                {
                    FilterCondition condition = (FilterCondition)FilterConditions[i];
                    if (i > 0)
                        query.Append(" " + condition.Logic + " ");
                    query.Append(BuildWhereClause(condition, i));
                }
            }

            query.Append(" ORDER BY UPDATE_TIME DESC");

            using (OleDbCommand cmd = new OleDbCommand(query.ToString(), conn))
            {
                for (int i = 0; i < FilterConditions.Count; i++)
                {
                    FilterCondition condition = (FilterCondition)FilterConditions[i];
                    string paramName = "@FilterValue" + i;

                    switch (condition.Operator)
                    {
                        case "like_start":
                            cmd.Parameters.AddWithValue(paramName, condition.Value + "%");
                            break;
                        case "like_end":
                            cmd.Parameters.AddWithValue(paramName, "%" + condition.Value);
                            break;
                        case "not_like_start":
                            cmd.Parameters.AddWithValue(paramName, condition.Value + "%");
                            break;
                        case "not_like_end":
                            cmd.Parameters.AddWithValue(paramName, "%" + condition.Value);
                            break;
                        case "like":
                        case "not_like":
                            cmd.Parameters.AddWithValue(paramName, "%" + condition.Value + "%");
                            break;
                        default:
                            cmd.Parameters.AddWithValue(paramName, condition.Value);
                            break;
                    }
                }

                using (OleDbDataAdapter adapter = new OleDbDataAdapter(cmd))
                {
                    DataTable dt = new DataTable();
                    conn.Open();
                    adapter.Fill(dt);
                    return dt;
                }
            }
        }
    }

    private string BuildWhereClause(FilterCondition condition, int index)
    {
        string paramName = "@FilterValue" + index;
        string field = condition.Field;

        switch (condition.Operator)
        {
            case "=":
            case "!=":
            case ">":
            case ">=":
            case "<":
            case "<=":
                return field + " " + condition.Operator + " " + paramName;
            case "like_start":
            case "like_end":
            case "like":
                return field + " LIKE " + paramName;
            case "not_like_start":
            case "not_like_end":
            case "not_like":
                return field + " NOT LIKE " + paramName;
            default:
                return field + " = " + paramName;
        }
    }

    private void GenerateDataTable(DataTable dt)
    {
        StringBuilder html = new StringBuilder();
        html.Append("<table class='table-custom'>");
        html.Append("<thead><tr>");
        html.Append("<th style='width: 80px;'>EQP_ID</th>");
        html.Append("<th style='width: 100px;'>PRODG_ID</th>");
        html.Append("<th style='width: 120px;'>PRODUCT_GROUP</th>");
        html.Append("<th style='width: 120px;'>PRODSPEC_ID</th>");
        html.Append("<th style='width: 80px;'>OPE_NO</th>");
        html.Append("<th style='width: 80px;'>BATCH_SIZE</th>");
        html.Append("<th style='width: 100px;'>MIN_WAFER_COUNT</th>");
        html.Append("<th style='width: 150px;'>MEMO</th>");
        html.Append("<th style='width: 80px;'>UPDATE_USER</th>");
        html.Append("<th style='width: 140px;'>UPDATE_TIME</th>");
        html.Append("<th style='width: 60px;'>啟用</th>");
        html.Append("<th style='width: 80px;'>操作</th>");
        html.Append("</tr></thead>");
        html.Append("<tbody>");

        for (int i = 0; i < dt.Rows.Count; i++)
        {
            DataRow row = dt.Rows[i];
            html.Append("<tr>");
            html.Append("<td>" + row["EQP_ID"] + "</td>");
            html.Append("<td>" + row["PRODG_ID"] + "</td>");
            html.Append("<td>" + row["PRODUCT_GROUP"] + "</td>");
            html.Append("<td>" + row["PRODSPEC_ID"] + "</td>");
            html.Append("<td>" + row["OPE_NO"] + "</td>");
            html.Append("<td>" + GetBatchSizeText(row["BATCH_SIZE"]) + "</td>");
            html.Append("<td>" + row["MIN_WAFER_COUNT"] + "</td>");
            html.Append("<td>" + row["MEMO"] + "</td>");
            html.Append("<td>" + row["UPDATE_USER"] + "</td>");
            html.Append("<td>" + Convert.ToDateTime(row["UPDATE_TIME"]).ToString("yyyy-MM-dd HH:mm:ss") + "</td>");

            bool isActive = Convert.ToBoolean(row["ACTIVE"]);
            html.Append("<td class='modify-cell'>");
            html.Append("<input type='checkbox' " + (isActive ? "checked='checked'" : "") + 
                       " onclick=\"updateActive('" + row["ID1"] + "', this.checked)\" />");
            html.Append("</td>");

            html.Append("<td class='modify-cell'>");
            html.Append("<button type='button' class='btn btn-custom btn-sm' " +
                       "onclick=\"deleteRecord('" + row["ID1"] + "')\">刪除</button>");
            html.Append("</td>");
            html.Append("</tr>");
        }

        html.Append("</tbody></table>");

        if (dt.Rows.Count == 0)
        {
            html.Clear();
            html.Append("<div class='alert alert-info' style='text-align: center;'>目前沒有符合條件的資料</div>");
        }

        tableContainer.InnerHtml = html.ToString();
    }

    private string GetBatchSizeText(object batchSize)
    {
        if (batchSize == null || batchSize == DBNull.Value)
            return "";

        switch (batchSize.ToString())
        {
            case "1": return "單批";
            case "2": return "雙批";
            default: return batchSize.ToString();
        }
    }

    private void ClearForm()
    {
        txb_eqpid.Value = "";
        txb_prodgid.Value = "";
        tbx_prodgrp.Value = "";
        tbx_prodspecid.Value = "";
        tbx_openo.Value = "";
        batch_size.Value = "";
        tbx_min_wafer_cnt.Value = "";
        tbx_memo.Value = "";
    }

    private void ShowMessage(string message, string cssClass)
    {
        pnlMessage.Visible = true;
        pnlMessage.CssClass = "alert " + cssClass;
        lblMessage.Text = message;

        string script = @"
            setTimeout(function() {
                var panel = document.getElementById('" + pnlMessage.ClientID + @"');
                if (panel) {
                    panel.style.display = 'none';
                }
            }, 3000);";
        ClientScript.RegisterStartupScript(this.GetType(), "hideMessage", script, true);
    }

    // 篩選條件類別
    public class FilterCondition
    {
        public string Field { get; set; }
        public string Operator { get; set; }
        public string Value { get; set; }
        public string Logic { get; set; }

        public FilterCondition()
        {
            Field = "";
            Operator = "";
            Value = "";
            Logic = "";
        }

        public FilterCondition(string field, string op, string value, string logic)
        {
            Field = field ?? "";
            Operator = op ?? "";
            Value = value ?? "";
            Logic = logic ?? "";
        }
    }
}
